This is XeTeX, Version 3.1415926-2.3-0.9997.5 (MiKTeX 2.9 64-bit) (preloaded format=xelatex 2011.10.31)  24 FEB 2014 08:22
entering extended mode
**MCIW_SYL_Test.tex

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\MCIW_SYL_Test.tex"
LaTeX2e <2011/06/27>
Babel <v3.8m> and hyphenation patterns for english, afrikaans, ancientgreek, ar
abic, armenian, assamese, basque, bengali, bokmal, bulgarian, catalan, coptic, 
croatian, czech, danish, dutch, esperanto, estonian, farsi, finnish, french, ga
lician, german, german-x-2009-06-19, greek, gujarati, hindi, hungarian, iceland
ic, indonesian, interlingua, irish, italian, kannada, kurmanji, lao, latin, lat
vian, lithuanian, malayalam, marathi, mongolian, mongolianlmc, monogreek, ngerm
an, ngerman-x-2009-06-19, nynorsk, oriya, panjabi, pinyin, polish, portuguese, 
romanian, russian, sanskrit, serbian, slovak, slovenian, spanish, swedish, swis
sgerman, tamil, telugu, turkish, turkmen, ukenglish, ukrainian, uppersorbian, u
senglishmax, welsh, loaded.

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\tufte-handout.cls"
Document Class: tufte-handout 2009/12/11 v3.5.0 Tufte-handout class

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\tufte-common.def"
File: tufte-common.def 2009/12/11 v3.5.0 Common code for the Tufte-LaTeX styles


("C:\Program Files\MiKTeX 2.9\tex\latex\xkeyval\xkeyval.sty"
Package: xkeyval 2008/08/13 v2.6a package option processing (HA)

("C:\Program Files\MiKTeX 2.9\tex\generic\xkeyval\xkeyval.tex"
\XKV@toks=\toks14
\XKV@tempa@toks=\toks15
\XKV@depth=\count80
File: xkeyval.tex 2008/08/13 v2.6a key=value parser (HA)

("C:\Program Files\MiKTeX 2.9\tex\generic\xkeyval\keyval.tex")))
("C:\Program Files\MiKTeX 2.9\tex\latex\xifthen\xifthen.sty"
Package: xifthen 2009/04/17 v1.3 Extended ifthen features

("C:\Program Files\MiKTeX 2.9\tex\latex\misc\etex.sty"
Package: etex 1998/03/26 v2.0 eTeX basic definition package (PEB)
\et@xins=\count81
)
("C:\Program Files\MiKTeX 2.9\tex\latex\tools\calc.sty"
Package: calc 2007/08/22 v4.3 Infix arithmetic (KKT,FJ)
\calc@Acount=\count82
\calc@Bcount=\count83
\calc@Adimen=\dimen102
\calc@Bdimen=\dimen103
\calc@Askip=\skip41
\calc@Bskip=\skip42
LaTeX Info: Redefining \setlength on input line 76.
LaTeX Info: Redefining \addtolength on input line 77.
\calc@Ccount=\count84
\calc@Cskip=\skip43
)
("C:\Program Files\MiKTeX 2.9\tex\latex\base\ifthen.sty"
Package: ifthen 2001/05/26 v1.1c Standard LaTeX ifthen package (DPC)
)
("C:\Program Files\MiKTeX 2.9\tex\latex\ifmtarg\ifmtarg.sty"
Package: ifmtarg 2009/09/02 v1.2a check for an empty argument
))
Class tufte-handout Info: Loading the base class `article'.

("C:\Program Files\MiKTeX 2.9\tex\latex\base\article.cls"
Document Class: article 2007/10/19 v1.4h Standard LaTeX document class
("C:\Program Files\MiKTeX 2.9\tex\latex\base\size10.clo"
File: size10.clo 2007/10/19 v1.4h Standard LaTeX file (size option)
)
\c@part=\count85
\c@section=\count86
\c@subsection=\count87
\c@subsubsection=\count88
\c@paragraph=\count89
\c@subparagraph=\count90
\c@figure=\count91
\c@table=\count92
\abovecaptionskip=\skip44
\belowcaptionskip=\skip45
\bibindent=\dimen104
)
("C:\Program Files\MiKTeX 2.9\tex\generic\oberdiek\ifpdf.sty"
Package: ifpdf 2011/01/30 v2.3 Provides the ifpdf switch (HO)
Package ifpdf Info: pdfTeX in PDF mode is not detected.
)
("C:\Program Files\MiKTeX 2.9\tex\generic\ifxetex\ifxetex.sty"
Package: ifxetex 2010/09/12 v0.6 Provides ifxetex conditional
)
("C:\Program Files\MiKTeX 2.9\tex\latex\titlesec\titlesec.sty"
Package: titlesec 2011/12/15 v2.10.0 Sectioning titles
\ttl@box=\box26
\beforetitleunit=\skip46
\aftertitleunit=\skip47
\ttl@plus=\dimen105
\ttl@minus=\dimen106
\ttl@toksa=\toks16
\titlewidth=\dimen107
\titlewidthlast=\dimen108
\titlewidthfirst=\dimen109
)
("C:\Program Files\MiKTeX 2.9\tex\latex\titlesec\titletoc.sty"
Package: titletoc 2011/12/15 v1.6 TOC entries
\ttl@leftsep=\dimen110
)
("C:\Program Files\MiKTeX 2.9\tex\latex\hyperref\hyperref.sty"
Package: hyperref 2012/05/13 v6.82q Hypertext links for LaTeX

("C:\Program Files\MiKTeX 2.9\tex\generic\oberdiek\hobsub-hyperref.sty"
Package: hobsub-hyperref 2012/04/25 v1.12 Bundle oberdiek, subset hyperref (HO)


("C:\Program Files\MiKTeX 2.9\tex\generic\oberdiek\hobsub-generic.sty"
Package: hobsub-generic 2012/04/25 v1.12 Bundle oberdiek, subset generic (HO)
Package: hobsub 2012/04/25 v1.12 Construct package bundles (HO)
Package: infwarerr 2010/04/08 v1.3 Providing info/warning/error messages (HO)
Package: ltxcmds 2011/11/09 v1.22 LaTeX kernel commands for general use (HO)
Package: ifluatex 2010/03/01 v1.3 Provides the ifluatex switch (HO)
Package ifluatex Info: LuaTeX not detected.
Package: ifvtex 2010/03/01 v1.5 Detect VTeX and its facilities (HO)
Package ifvtex Info: VTeX not detected.
Package: intcalc 2007/09/27 v1.1 Expandable calculations with integers (HO)
Package hobsub Info: Skipping package `ifpdf' (already loaded).
Package: etexcmds 2011/02/16 v1.5 Avoid name clashes with e-TeX commands (HO)
Package etexcmds Info: Could not find \expanded.
(etexcmds)             That can mean that you are not using pdfTeX 1.50 or
(etexcmds)             that some package has redefined \expanded.
(etexcmds)             In the latter case, load this package earlier.
Package: kvsetkeys 2012/04/25 v1.16 Key value parser (HO)
Package: kvdefinekeys 2011/04/07 v1.3 Define keys (HO)
Package: pdftexcmds 2011/11/29 v0.20 Utility functions of pdfTeX for LuaTeX (HO
)
Package pdftexcmds Info: LuaTeX not detected.
Package pdftexcmds Info: pdfTeX >= 1.30 not detected.
Package pdftexcmds Info: \pdf@primitive is available.
Package pdftexcmds Info: \pdf@ifprimitive is available.
Package pdftexcmds Info: \pdfdraftmode not found.
Package: pdfescape 2011/11/25 v1.13 Implements pdfTeX's escape features (HO)
Package: bigintcalc 2012/04/08 v1.3 Expandable calculations on big integers (HO
)
Package: bitset 2011/01/30 v1.1 Handle bit-vector datatype (HO)
Package: uniquecounter 2011/01/30 v1.2 Provide unlimited unique counter (HO)
)
Package hobsub Info: Skipping package `hobsub' (already loaded).
Package: letltxmacro 2010/09/02 v1.4 Let assignment for LaTeX macros (HO)
Package: hopatch 2011/06/24 v1.1 Wrapper for package hooks (HO)
Package: xcolor-patch 2011/01/30 xcolor patch
Package: atveryend 2011/06/30 v1.8 Hooks at the very end of document (HO)
Package atveryend Info: \enddocument detected (standard20110627).
Package: atbegshi 2011/10/05 v1.16 At begin shipout hook (HO)
Package: refcount 2011/10/16 v3.4 Data extraction from label references (HO)
Package: hycolor 2011/01/30 v1.7 Color options for hyperref/bookmark (HO)
)
("C:\Program Files\MiKTeX 2.9\tex\latex\oberdiek\kvoptions.sty"
Package: kvoptions 2011/06/30 v3.11 Key value format for package options (HO)
)
\@linkdim=\dimen111
\Hy@linkcounter=\count93
\Hy@pagecounter=\count94

("C:\Program Files\MiKTeX 2.9\tex\latex\hyperref\pd1enc.def"
File: pd1enc.def 2012/05/13 v6.82q Hyperref: PDFDocEncoding definition (HO)
)
\Hy@SavedSpaceFactor=\count95

("C:\Program Files\MiKTeX 2.9\tex\latex\00miktex\hyperref.cfg"
File: hyperref.cfg 2002/06/06 v1.2 hyperref configuration of TeXLive
)
Package hyperref Info: Option `unicode' set `true' on input line 3941.

("C:\Program Files\MiKTeX 2.9\tex\latex\hyperref\puenc.def"
File: puenc.def 2012/05/13 v6.82q Hyperref: PDF Unicode definition (HO)
)
Package hyperref Info: Option `hyperfootnotes' set `false' on input line 3941.
Package hyperref Info: Hyper figures OFF on input line 4062.
Package hyperref Info: Link nesting OFF on input line 4067.
Package hyperref Info: Hyper index ON on input line 4070.
Package hyperref Info: Plain pages OFF on input line 4077.
Package hyperref Info: Backreferencing OFF on input line 4082.
Package hyperref Info: Implicit mode ON; LaTeX internals redefined.
Package hyperref Info: Bookmarks ON on input line 4300.
\c@Hy@tempcnt=\count96

("C:\Program Files\MiKTeX 2.9\tex\xelatex\xetexurl\url.sty"
\Urlmuskip=\muskip10
Package: url 2004/03/15  ver 3.1  Verb mode for urls, etc.
)
LaTeX Info: Redefining \url on input line 4653.
\Fld@menulength=\count97
\Field@Width=\dimen112
\Fld@charsize=\dimen113
Package hyperref Info: Hyper figures OFF on input line 5773.
Package hyperref Info: Link nesting OFF on input line 5778.
Package hyperref Info: Hyper index ON on input line 5781.
Package hyperref Info: backreferencing OFF on input line 5788.
Package hyperref Info: Link coloring OFF on input line 5793.
Package hyperref Info: Link coloring with OCG OFF on input line 5798.
Package hyperref Info: PDF/A mode OFF on input line 5803.
LaTeX Info: Redefining \ref on input line 5843.
LaTeX Info: Redefining \pageref on input line 5847.
\Hy@abspage=\count98
\c@Item=\count99
)

Package hyperref Message: Driver: hxetex.

("C:\Program Files\MiKTeX 2.9\tex\latex\hyperref\hxetex.def"
File: hxetex.def 2012/05/13 v6.82q Hyperref driver for XeTeX

("C:\Program Files\MiKTeX 2.9\tex\generic\oberdiek\stringenc.sty"
Package: stringenc 2011/12/02 v1.10 Convert strings between diff. encodings (HO
)
)
\pdfm@box=\box27
\c@Hy@AnnotLevel=\count100
\HyField@AnnotCount=\count101
\Fld@listcount=\count102
\c@bookmark@seq@number=\count103

("C:\Program Files\MiKTeX 2.9\tex\latex\oberdiek\rerunfilecheck.sty"
Package: rerunfilecheck 2011/04/15 v1.7 Rerun checks for auxiliary files (HO)
Package rerunfilecheck Info: Feature \pdfmdfivesum is not available
(rerunfilecheck)             (e.g. pdfTeX or LuaTeX with package `pdftexcmds').

(rerunfilecheck)             Therefore file contents cannot be checked efficien
tly
(rerunfilecheck)             and the loading of the package is aborted.
)
\Hy@SectionHShift=\skip48
)

Package hyperref Warning: Option `pagecolor' is not available anymore.

("C:\Program Files\MiKTeX 2.9\tex\latex\ms\ragged2e.sty"
Package: ragged2e 2009/05/21 v2.1 ragged2e Package (MS)

("C:\Program Files\MiKTeX 2.9\tex\latex\ms\everysel.sty"
Package: everysel 2011/10/28 v1.2 EverySelectfont Package (MS)
)
\CenteringLeftskip=\skip49
\RaggedLeftLeftskip=\skip50
\RaggedRightLeftskip=\skip51
\CenteringRightskip=\skip52
\RaggedLeftRightskip=\skip53
\RaggedRightRightskip=\skip54
\CenteringParfillskip=\skip55
\RaggedLeftParfillskip=\skip56
\RaggedRightParfillskip=\skip57
\JustifyingParfillskip=\skip58
\CenteringParindent=\skip59
\RaggedLeftParindent=\skip60
\RaggedRightParindent=\skip61
\JustifyingParindent=\skip62
)
("C:\Program Files\MiKTeX 2.9\tex\latex\geometry\geometry.sty"
Package: geometry 2010/09/12 v5.6 Page Geometry
\Gm@cnth=\count104
\Gm@cntv=\count105
\c@Gm@tempcnt=\count106
\Gm@bindingoffset=\dimen114
\Gm@wd@mp=\dimen115
\Gm@odd@mp=\dimen116
\Gm@even@mp=\dimen117
\Gm@layoutwidth=\dimen118
\Gm@layoutheight=\dimen119
\Gm@layouthoffset=\dimen120
\Gm@layoutvoffset=\dimen121
\Gm@dimlist=\toks17

("C:\Program Files\MiKTeX 2.9\tex\xelatex\xetexconfig\geometry.cfg"))
("C:\Program Files\MiKTeX 2.9\tex\latex\changepage\changepage.sty"
Package: changepage 2009/10/20 v1.0c check page and change page layout
\c@cp@cntr=\count107
\cp@tempcnt=\count108
)
\@tufte@overhang=\skip63
\@tufte@fullwidth=\skip64
\@tufte@caption@fill=\skip65

("C:\Program Files\MiKTeX 2.9\tex\latex\paralist\paralist.sty"
Package: paralist 2002/03/18 v2.3b Extended list environments (BS)
\pltopsep=\skip66
\plpartopsep=\skip67
\plitemsep=\skip68
\plparsep=\skip69
\pl@lab=\toks18
)
("C:\Program Files\MiKTeX 2.9\tex\latex\textcase\textcase.sty"
Package: textcase 2004/10/07 v0.07 Text only upper/lower case changing (DPC)
)
("C:\Program Files\MiKTeX 2.9\tex\latex\soul\soul.sty"
Package: soul 2003/11/17 v2.4 letterspacing/underlining (mf)
Requested font "ectt1000" scaled 1000
 -> ectt1000
\SOUL@word=\toks19
\SOUL@lasttoken=\toks20
\SOUL@cmds=\toks21
\SOUL@buffer=\toks22
\SOUL@token=\toks23
\SOUL@spaceskip=\skip70
\SOUL@ttwidth=\dimen122
\SOUL@uldp=\dimen123
\SOUL@ulht=\dimen124
)
LaTeX Info: Redefining \allcapsspacing on input line 697.
LaTeX Info: Redefining \smallcapsspacing on input line 697.

("C:\Program Files\MiKTeX 2.9\tex\latex\setspace\setspace.sty"
Package: setspace 2011/12/19 v6.7a set line spacing
)
("C:\Program Files\MiKTeX 2.9\tex\latex\natbib\natbib.sty"
Package: natbib 2010/09/13 8.31b (PWD, AO)
\bibhang=\skip71
\bibsep=\skip72
LaTeX Info: Redefining \cite on input line 694.
\c@NAT@ctr=\count109
)
("C:\Program Files\MiKTeX 2.9\tex\latex\natbib\bibentry.sty"
Package: bibentry 2007/10/30 1.5 (PWD)
)
No file MCIW_SYL_Test.bbl.
\c@@tufte@num@bibkeys=\count110
("C:\Program Files\MiKTeX 2.9\tex\latex\sauerj\optparams.sty"
Package: optparams 2004/08/14 v0.9 multiple optional parameters in macros
)
\@tufte@sidenote@vertical@offset=\skip73

("C:\Program Files\MiKTeX 2.9\tex\latex\placeins\placeins.sty"
Package: placeins 2005/04/18  v 2.2
)
\@tufte@margin@floatbox=\box28
\@tufte@figure@box=\box29
\@tufte@caption@box=\box30
\@tufte@caption@vertical@offset=\skip74
\@tufte@float@contents@width=\skip75

("C:\Program Files\MiKTeX 2.9\tex\latex\fancyhdr\fancyhdr.sty"
\fancy@headwidth=\skip76
\f@ncyO@elh=\skip77
\f@ncyO@erh=\skip78
\f@ncyO@olh=\skip79
\f@ncyO@orh=\skip80
\f@ncyO@elf=\skip81
\f@ncyO@erf=\skip82
\f@ncyO@olf=\skip83
\f@ncyO@orf=\skip84
)
("C:\Program Files\MiKTeX 2.9\tex\latex\xcolor\xcolor.sty"
Package: xcolor 2007/01/21 v2.11 LaTeX color extensions (UK)

("C:\Program Files\MiKTeX 2.9\tex\latex\00miktex\color.cfg"
File: color.cfg 2007/01/18 v1.5 color configuration of teTeX/TeXLive
)
Package xcolor Info: Package option `usenames' ignored on input line 216.
Package xcolor Info: Driver file: xetex.def on input line 225.

("C:\Program Files\MiKTeX 2.9\tex\xelatex\xetex-def\xetex.def"
File: xetex.def 2009/11/22 v0.94 LaTeX color/graphics driver for XeTeX (RRM/JK)

)
Package xcolor Info: Model `cmy' substituted by `cmy0' on input line 1337.
Package xcolor Info: Model `RGB' extended on input line 1353.
Package xcolor Info: Model `HTML' substituted by `rgb' on input line 1355.
Package xcolor Info: Model `Hsb' substituted by `hsb' on input line 1356.
Package xcolor Info: Model `tHsb' substituted by `hsb' on input line 1357.
Package xcolor Info: Model `HSB' substituted by `hsb' on input line 1358.
Package xcolor Info: Model `Gray' substituted by `gray' on input line 1359.
Package xcolor Info: Model `wave' substituted by `hsb' on input line 1360.

("C:\Program Files\MiKTeX 2.9\tex\latex\graphics\dvipsnam.def"
File: dvipsnam.def 1999/02/16 v3.0i Driver-dependant file (DPC,SPQR)
)
("C:\Program Files\MiKTeX 2.9\tex\latex\xcolor\svgnam.def"
File: svgnam.def 2007/01/21 v2.11 Predefined colors according to SVG 1.1 (UK)
))
\langwohyphens=\language70

("C:\Program Files\MiKTeX 2.9\tex\latex\tools\multicol.sty"
Package: multicol 2011/06/27 v1.7a multicolumn formatting (FMi)
\c@tracingmulticols=\count111
\mult@box=\box31
\multicol@leftmargin=\dimen125
\c@unbalance=\count112
\c@collectmore=\count113
\doublecol@number=\count114
\multicoltolerance=\count115
\multicolpretolerance=\count116
\full@width=\dimen126
\page@free=\dimen127
\premulticols=\dimen128
\postmulticols=\dimen129
\multicolsep=\skip85
\multicolbaselineskip=\skip86
\partial@page=\box32
\last@line=\box33
\mult@rightbox=\box34
\mult@grightbox=\box35
\mult@gfirstbox=\box36
\mult@firstbox=\box37
\@tempa=\box38
\@tempa=\box39
\@tempa=\box40
\@tempa=\box41
\@tempa=\box42
\@tempa=\box43
\@tempa=\box44
\@tempa=\box45
\@tempa=\box46
\@tempa=\box47
\@tempa=\box48
\@tempa=\box49
\@tempa=\box50
\@tempa=\box51
\@tempa=\box52
\@tempa=\box53
\@tempa=\box54
\c@columnbadness=\count117
\c@finalcolumnbadness=\count118
\last@try=\dimen130
\multicolovershoot=\dimen131
\multicolundershoot=\dimen132
\mult@nat@firstbox=\box55
\colbreak@box=\box56
\multicol@sort@counter=\count119
)))
Package hyperref Info: Option `colorlinks' set `true' on input line 29.

("C:\Program Files\MiKTeX 2.9\tex\latex\microtype\microtype.sty"
Package: microtype 2010/01/10 v2.4 Micro-typography with pdfTeX (RS)


Package microtype Warning: You don't seem to be using pdftex.
(microtype)                `microtype' only works with pdftex.
(microtype)                Try running `pdflatex' instead of `xelatex'.

) ("C:\Program Files\MiKTeX 2.9\tex\latex\lipsum\lipsum.sty"
Package: lipsum 2011/04/14 v1.2 150 paragraphs of Lorem Ipsum dummy text
\c@lips@count=\count120
)
("C:\Program Files\MiKTeX 2.9\tex\latex\booktabs\booktabs.sty"
Package: booktabs 2005/04/14 v1.61803 publication quality tables
\heavyrulewidth=\dimen133
\lightrulewidth=\dimen134
\cmidrulewidth=\dimen135
\belowrulesep=\dimen136
\belowbottomsep=\dimen137
\aboverulesep=\dimen138
\abovetopsep=\dimen139
\cmidrulesep=\dimen140
\cmidrulekern=\dimen141
\defaultaddspace=\dimen142
\@cmidla=\count121
\@cmidlb=\count122
\@aboverulesep=\dimen143
\@belowrulesep=\dimen144
\@thisruleclass=\count123
\@lastruleclass=\count124
\@thisrulewidth=\dimen145
)
("C:\Program Files\MiKTeX 2.9\tex\latex\graphics\graphicx.sty"
Package: graphicx 1999/02/16 v1.0f Enhanced LaTeX Graphics (DPC,SPQR)

("C:\Program Files\MiKTeX 2.9\tex\latex\graphics\graphics.sty"
Package: graphics 2009/02/05 v1.0o Standard LaTeX Graphics (DPC,SPQR)

("C:\Program Files\MiKTeX 2.9\tex\latex\graphics\trig.sty"
Package: trig 1999/03/16 v1.09 sin cos tan (DPC)
)
("C:\Program Files\MiKTeX 2.9\tex\latex\00miktex\graphics.cfg"
File: graphics.cfg 2007/01/18 v1.5 graphics configuration of teTeX/TeXLive
)
Package graphics Info: Driver file: xetex.def on input line 91.
)
\Gin@req@height=\dimen146
\Gin@req@width=\dimen147
)
("C:\Program Files\MiKTeX 2.9\tex\latex\fancyvrb\fancyvrb.sty"
Package: fancyvrb 2008/02/07

Style option: `fancyvrb' v2.7a, with DG/SPQR fixes, and firstline=lastline fix 
<2008/02/07> (tvz)
\FV@CodeLineNo=\count125
\FV@InFile=\read1
\FV@TabBox=\box57
\c@FancyVerbLine=\count126
\FV@StepNumber=\count127
\FV@OutFile=\write3
) ("C:\Program Files\MiKTeX 2.9\tex\latex\tools\xspace.sty"
Package: xspace 2009/10/20 v1.13 Space after command names (DPC,MH)
)
("C:\Program Files\MiKTeX 2.9\tex\latex\comment\comment.sty"
\CommentStream=\write4

Excluding comment 'comment')
("C:\Program Files\MiKTeX 2.9\tex\latex\units\units.sty"
Package: units 1998/08/04 v0.9b Typesetting units

("C:\Program Files\MiKTeX 2.9\tex\latex\units\nicefrac.sty"
Package: nicefrac 1998/08/04 v0.9b Nice fractions
\L@UnitsRaiseDisplaystyle=\skip87
\L@UnitsRaiseTextstyle=\skip88
\L@UnitsRaiseScriptstyle=\skip89
))
("C:\Program Files\MiKTeX 2.9\tex\latex\base\makeidx.sty"
Package: makeidx 2000/03/29 v1.0m Standard LaTeX package
)
\@indexfile=\write5

Writing index file MCIW_SYL_Test.idx
("C:\Program Files\MiKTeX 2.9\tex\generic\babel\babel.sty"
Package: babel 2008/07/08 v3.8m The Babel package

*************************************
* Local config file bblopts.cfg used
*
("C:\Program Files\MiKTeX 2.9\tex\latex\00miktex\bblopts.cfg"
File: bblopts.cfg 2006/07/31 v1.0 MiKTeX 'babel' configuration
)
("C:\Program Files\MiKTeX 2.9\tex\generic\babel\english.ldf"
Language: english 2005/03/30 v3.3o English support from the babel system

("C:\Program Files\MiKTeX 2.9\tex\generic\babel\babel.def"
File: babel.def 2008/07/08 v3.8m Babel common definitions
\babel@savecnt=\count128
\U@D=\dimen148
)
\l@canadian = a dialect from \language\l@american 
\l@australian = a dialect from \language\l@british 
\l@newzealand = a dialect from \language\l@british 
))
\@input{autocorrect.aux}

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\autocorrect.tex")
\@input{extrafunctions.aux}

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\extrafunctions.tex"

! LaTeX Error: Command \st already defined.
               Or name \end... illegal, see p.192 of the manual.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.297 ...mand{\st}[0]{\textsuperscript{st}\xspace}
                                                  
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

)
Package babel Info: Making " an active character on input line 150.

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\MCIW_SYL_Test.aux")
LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 212.
LaTeX Font Info:    ... okay on input line 212.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 212.
LaTeX Font Info:    ... okay on input line 212.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 212.
LaTeX Font Info:    ... okay on input line 212.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 212.
LaTeX Font Info:    ... okay on input line 212.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 212.
LaTeX Font Info:    ... okay on input line 212.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 212.
LaTeX Font Info:    ... okay on input line 212.
LaTeX Font Info:    Checking defaults for PD1/pdf/m/n on input line 212.
LaTeX Font Info:    ... okay on input line 212.
LaTeX Font Info:    Checking defaults for PU/pdf/m/n on input line 212.
LaTeX Font Info:    ... okay on input line 212.
\AtBeginShipoutBox=\box58
Package hyperref Info: Link coloring ON on input line 212.

("C:\Program Files\MiKTeX 2.9\tex\latex\hyperref\nameref.sty"
Package: nameref 2010/04/30 v2.40 Cross-referencing by name of section

("C:\Program Files\MiKTeX 2.9\tex\generic\oberdiek\gettitlestring.sty"
Package: gettitlestring 2010/12/03 v1.4 Cleanup title references (HO)
)
\c@section@level=\count129
)
LaTeX Info: Redefining \ref on input line 212.
LaTeX Info: Redefining \pageref on input line 212.
LaTeX Info: Redefining \nameref on input line 212.

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\MCIW_SYL_Test.out")
("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\MCIW_SYL_Test.out")
\@outlinefile=\write6
 ABD: EverySelectfont initializing macros
LaTeX Info: Redefining \selectfont on input line 212.

*geometry* detected driver: pdftex
*geometry* verbose mode - [ preamble ] result:
* driver: pdftex
* paper: letterpaper
* layout: <same size as paper>
* layoutoffset:(h,v)=(0.0pt,0.0pt)
* modes: twoside asymmetric 
* h-part:(L,W,R)=(72.26999pt, 312.0pt, 230.02501pt)
* v-part:(T,H,B)=(72.26999pt, 616.0pt, 106.7pt)
* \paperwidth=614.295pt
* \paperheight=794.96999pt
* \textwidth=312.0pt
* \textheight=616.0pt
* \oddsidemargin=0.0pt
* \evensidemargin=0.0pt
* \topmargin=-42.0pt
* \headheight=14.0pt
* \headsep=28.0pt
* \topskip=10.0pt
* \footskip=30.0pt
* \marginparwidth=144.0pt
* \marginparsep=24.0pt
* \columnsep=10.0pt
* \skip\footins=9.0pt plus 4.0pt minus 2.0pt
* \hoffset=0.0pt
* \voffset=0.0pt
* \mag=1000
* \@twocolumnfalse
* \@twosidetrue
* \@mparswitchfalse
* \@reversemarginfalse
* (1in=72.27pt=25.4mm, 1cm=28.453pt)

Requested font "cmr12" at 14.4pt
 -> cmr12
Requested font "cmti12" at 14.4pt
 -> cmti12
Requested font "cmmi12" at 14.4pt
 -> cmmi12
Requested font "cmsy10" at 14.4pt
 -> cmsy10
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <14.4> on input line 214.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line 214.
Requested font "cmr8" at 8.0pt
 -> cmr8
Requested font "cmr6" at 6.0pt
 -> cmr6
Requested font "cmmi8" at 8.0pt
 -> cmmi8
Requested font "cmmi6" at 6.0pt
 -> cmmi6
Requested font "cmsy8" at 8.0pt
 -> cmsy8
Requested font "cmsy6" at 6.0pt
 -> cmsy6
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <8> on input line 214.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <6> on input line 214.
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <5> on input line 214.
Requested font "cmti8" at 8.0pt
 -> cmti8

LaTeX Warning: Marginpar on page 1 moved.

Requested font "cmr12" at 12.0pt
 -> cmr12
Requested font "cmti12" at 12.0pt
 -> cmti12
Requested font "cmcsc10" at 12.0pt
 -> cmcsc10
Requested font "cmbx10" at 10.0pt
 -> cmbx10
Requested font "cmti10" at 10.0pt
 -> cmti10
Requested font "cmbx8" at 8.0pt
 -> cmbx8

LaTeX Warning: Marginpar on page 1 moved.

Requested font "cmcsc10" at 10.0pt
 -> cmcsc10
[1





]
Requested font "cmcsc10" at 8.0pt
 -> cmcsc10


LaTeX Warning: Marginpar on page 2 moved.

LaTeX Font Info:    Try loading font information for OMS+cmr on input line 248.

("C:\Program Files\MiKTeX 2.9\tex\latex\base\omscmr.fd"
File: omscmr.fd 1999/05/25 v2.5h Standard LaTeX font definitions
)
LaTeX Font Info:    Font shape `OMS/cmr/m/n' in size <10> not available
(Font)              Font shape `OMS/cmsy/m/n' tried instead on input line 248.

! Undefined control sequence.
\user@sh@"@`@ ->\Ayn 
                     
l.248 ...n al-Taq"as"im F"i Ma"`rifat al-Aq"al"im}
                                                  . Translated by Basil Anth...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

Requested font "cmcsc10" at 7.0pt
 -> cmcsc10

! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.252 ...opaedia of Islam, 2\nd and 3\rd Editions}
                                                  . \href{http://referencewo...

I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.252 ...opaedia of Islam, 2\nd and 3\rd Editions}
                                                  . \href{http://referencewo...

I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.329 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.329 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.329 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.329 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.329 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.329 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.329 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.329 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.329 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.329 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.329 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.329 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.329 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[2]

LaTeX Warning: Marginpar on page 3 moved.


LaTeX Warning: Marginpar on page 3 moved.


LaTeX Warning: Marginpar on page 3 moved.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.337 ...nd Visualization: Building Digital Maps}}
                                                   is a complex task that in...

I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.


LaTeX Warning: Marginpar on page 3 moved.

! Undefined control sequence.
\user@sh@"@'@ ->\Alif 
                      
l.339 ...a) religious groups; legal schools; Qur"'
                                                  "anic recitations; (b) loc...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.


LaTeX Warning: Marginpar on page 3 moved.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.340 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.340 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.340 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.340 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.340 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.340 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.340 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.340 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.340 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.340 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.340 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.340 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.340 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[3]

LaTeX Warning: Marginpar on page 4 moved.


Overfull \hbox (12.69495pt too wide) in paragraph at lines 346--347
[]\OT1/cmr/m/n/10 During the sec-ond part of the course we will be read-ing al-
Muqaddas^^V^^P's 
 []


LaTeX Warning: Marginpar on page 4 moved.


LaTeX Warning: Marginpar on page 4 moved.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.350 \newpage
              
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.350 \newpage
              
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.350 \newpage
              
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.350 \newpage
              
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.350 \newpage
              
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.350 \newpage
              
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.350 \newpage
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.350 \newpage
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.350 \newpage
              
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.350 \newpage
              
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.350 \newpage
              
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.350 \newpage
              
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.350 \newpage
              
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[4]

LaTeX Warning: Marginpar on page 5 moved.


LaTeX Warning: Marginpar on page 5 moved.


LaTeX Warning: Marginpar on page 5 moved.


LaTeX Warning: Marginpar on page 5 moved.


LaTeX Warning: Marginpar on page 5 moved.


LaTeX Warning: Marginpar on page 5 moved.


LaTeX Warning: Marginpar on page 5 moved.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.368 \newpage
              
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.368 \newpage
              
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.368 \newpage
              
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.368 \newpage
              
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.368 \newpage
              
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.368 \newpage
              
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.368 \newpage
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.368 \newpage
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.368 \newpage
              
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.368 \newpage
              
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.368 \newpage
              
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.368 \newpage
              
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.368 \newpage
              
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[5]
Requested font "cmr10" at 10.95pt
 -> cmr10
Requested font "cmti10" at 10.95pt
 -> cmti10
Requested font "cmbxti10" at 10.0pt
 -> cmbxti10

Overfull \hbox (6.40897pt too wide) in paragraph at lines 378--387
\OT1/cmr/m/it/10 the Ro-man World \OT1/cmr/m/n/10 @ [][]or-bis.stanford.edu[][]
; \OMS/cmsy/m/n/10 ^^O \OT1/cmr/m/sc/10 P l e i a d e s\OT1/cmr/m/n/10 : a comm
unity- 
 []

Requested font "cmtt10" at 10.0pt
 -> cmtt10
! Undefined control sequence.
\user@sh@"@`@ ->\Ayn 
                     
l.425 ...tion}: al-Shahrast"an"i, Mu"hammad ibn "`
                                                  Abd al-Kar"im. \textit{Mus...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.425 ...1984; Arabic text is available online);\\
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.425 ...1984; Arabic text is available online);\\
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.425 ...1984; Arabic text is available online);\\
                                                  
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.425 ...1984; Arabic text is available online);\\
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.425 ...1984; Arabic text is available online);\\
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.425 ...1984; Arabic text is available online);\\
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.425 ...1984; Arabic text is available online);\\
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.425 ...1984; Arabic text is available online);\\
                                                  
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.425 ...1984; Arabic text is available online);\\
                                                  
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.425 ...1984; Arabic text is available online);\\
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.425 ...1984; Arabic text is available online);\\
                                                  
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.425 ...1984; Arabic text is available online);\\
                                                  
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.425 ...1984; Arabic text is available online);\\
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[6]

! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.432 ...ynasties up until the 10\thh century~\CE}
                                                  .\\
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.432 ...ynasties up until the 10\thh century~\CE}
                                                  .\\
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.


Overfull \hbox (7.51515pt too wide) in paragraph at lines 433--434
[]\OT1/cmr/bx/n/10 Materials: \OMS/cmsy/m/n/10 ^^O \OT1/cmr/m/n/10 Graphs of ma
-jor Is-lamic dy-nas-ties [\OT1/cmtt/m/n/10 Trunk\OT1/cmr/m/n/10 ]; \OMS/cmsy/m
/n/10 ^^O \OT1/cmr/m/n/10 Bosworth, 
 []

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\user@sh@"@`@ ->\Ayn 
                     
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.455 \textsc{Jaz"irat al-"`Arab}
                                 : The Arabian Peninsula\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.458 \item[\textbf{2/12/2014}]
                                (Wednesday)\\
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[7]
! Undefined control sequence.
\user@sh@"@`@ ->\Ayn 
                     
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.459 \textsc{al-"`Ir"aq}
                         : Lower Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.468 \textsc{Aq"ur/al-Jaz"ira}
                               : Upper Mesopotamia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.474 \textsc{al-Sh"am:}
                         Greater Syria\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.474 \textsc{al-Sh"am:}
                         Greater Syria\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.474 \textsc{al-Sh"am:}
                         Greater Syria\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.474 \textsc{al-Sh"am:}
                         Greater Syria\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.474 \textsc{al-Sh"am:}
                         Greater Syria\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.474 \textsc{al-Sh"am:}
                         Greater Syria\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.478 \textsc{Mi"sr}
                    : Egypt\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.478 \textsc{Mi"sr}
                    : Egypt\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.478 \textsc{Mi"sr}
                    : Egypt\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.478 \textsc{Mi"sr}
                    : Egypt\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.478 \textsc{Mi"sr}
                    : Egypt\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.478 \textsc{Mi"sr}
                    : Egypt\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.488 \textsc{al-Mashriq/Khur"as"an}
                                    : Northeastern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\user@sh@"@'@ ->\Alif 
                      
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.494 \textsc{al-Mashriq/M"a war"a"'-l-nahr}
                                            : Central Asia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.511 \textsc{al-Daylam and G"il"an}
                                    : Northwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...

I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.512 \textbf{Materials:}
                          al-Muqaddas"i's ``The Best Divisions'' (relevant s...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[8]
! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.515 \textsc{al-Ri"h"ab}
                         : Azerbaijan \and  Armenia\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.521 \textsc{al-Jib"al}
                        : Mountain region in WNW Iran \and  ENE Iraq\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.521 \textsc{al-Jib"al}
                        : Mountain region in WNW Iran \and  ENE Iraq\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.521 \textsc{al-Jib"al}
                        : Mountain region in WNW Iran \and  ENE Iraq\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.521 \textsc{al-Jib"al}
                        : Mountain region in WNW Iran \and  ENE Iraq\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.521 \textsc{al-Jib"al}
                        : Mountain region in WNW Iran \and  ENE Iraq\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.521 \textsc{al-Jib"al}
                        : Mountain region in WNW Iran \and  ENE Iraq\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.525 \textsc{Kh"uzist"an}
                          : Southeastern Iraq \and  Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.531 \textsc{F"ars:}
                      Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.531 \textsc{F"ars:}
                      Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.531 \textsc{F"ars:}
                      Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.531 \textsc{F"ars:}
                      Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.531 \textsc{F"ars:}
                      Southwestern Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.531 \textsc{F"ars:}
                      Southwestern Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \user@active@arg" has an extra }.
<inserted text> 
                \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \user@active@arg" was complete.
<to be read again> 
                   \par 
l.535 \textsc{K"irm"an:}
                         South Central Iran\\
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.561 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.561 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.561 
      
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.561 
      
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.561 
      
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.561 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.561 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.561 
      
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.561 
      
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.561 
      
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.561 
      
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.561 
      
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.561 
      
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[9]
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.631 \newpage
              
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.631 \newpage
              
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.631 \newpage
              
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.631 \newpage
              
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.631 \newpage
              
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.631 \newpage
              
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.631 \newpage
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.631 \newpage
              
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.631 \newpage
              
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.631 \newpage
              
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.631 \newpage
              
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.631 \newpage
              
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.631 \newpage
              
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[10]
Requested font "cmcsc10" at 10.95pt
 -> cmcsc10

Overfull \hbox (20.2643pt too wide) in paragraph at lines 637--638
[]\OT1/cmr/m/n/10 Download and in-stall \OT1/cmr/m/sc/10 Z o t e r o : S t a n 
-d a l o n e \OT1/cmr/m/n/10 from [][]www.zotero.org[][].  
 []


LaTeX Warning: Marginpar on page 11 moved.


LaTeX Warning: Marginpar on page 11 moved.


LaTeX Warning: Marginpar on page 11 moved.


LaTeX Warning: Marginpar on page 11 moved.


LaTeX Warning: Marginpar on page 11 moved.

No file MCIW_SYL_Test.bbl.
No file MCIW_SYL_Test.ind.
Package atveryend Info: Empty hook `BeforeClearDocument' on input line 680.
! Argument of \MakeTextLowercase has an extra }.
<inserted text> 
                \par 
l.680 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \MakeTextLowercase was complete.
<to be read again> 
                   \par 
l.680 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! You can't use `math shift character $' after \the.
\@uclcnotmath ...dgroup \noexpand \@skipmath #3#4$
                                                  \valign $}\reserved@a 
l.680 \end{document}
                    
I'm forgetting what you said and using zero instead.

! Argument of \@skipmath has an extra }.
<inserted text> 
                \par 
l.680 \end{document}
                    
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
\SOUL@token 
! Paragraph ended before \@skipmath was complete.
<to be read again> 
                   \par 
l.680 \end{document}
                    
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Undefined control sequence.
\newlinetospace  #1->\let \@tufte@orig@cr 
                                          \\\def \\{\@tufte@newlinetospace }...
l.680 \end{document}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Use of \SOUL@n doesn't match its definition.
\\... {\string \MakeTextLowercase }\edef \SOUL@n {
                                                  \string #2}\ifx \SOUL@x \S...
l.680 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.

! Use of \protect doesn't match its definition.
\@tufte@newlinetospace ...\@tufte@newlinetospace  
                                                  
l.680 \end{document}
                    
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.


! Package soul Error: Reconstruction failed.

See the soul package documentation for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.680 \end{document}
                    
I came across hyphenatable material enclosed in group braces,
which I can't handle. Either drop the braces or make the material
unbreakable using an \mbox (\hbox). Note that a space
also counts as possible hyphenation point. See page 4 of the manual.
I'm leaving a black square so that you can see where I am right now.

! Undefined control sequence.
\SOUL@postamble ...obal \skip@ =\SOUL@soouterskip 
                                                  \aftergroup \SOUL@socheck 
l.680 \end{document}
                    
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing number, treated as zero.
<to be read again> 
                   \aftergroup 
l.680 \end{document}
                    
A number should have been here; I inserted `0'.
(If you can't figure out why I needed to see a number,
look up `weird error' in the index to The TeXbook.)

! Illegal unit of measure (pt inserted).
<to be read again> 
                   \aftergroup 
l.680 \end{document}
                    
Dimensions can be in units of em, ex, in, pt, pc,
cm, mm, dd, cc, bp, or sp; but yours is a new one!
I'll assume that you meant to say pt, for printer's points.
To recover gracefully from this error, it's best to
delete the erroneous units; e.g., type `2' to delete
two letters. (See Chapter 27 of The TeXbook.)

! Extra }, or forgotten \endgroup.
\SOUL@n ...rave \z@ \SOUL@do {#1}\SOUL@postamble }
                                                  
l.680 \end{document}
                    
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[11]
Package atveryend Info: Empty hook `AfterLastShipout' on input line 680.

("D:\Working Documents\Geography of the Classical Islamic World\_MCIW Spring 20
14 - LaTeX Files\MCIW_SYL_Test.aux")
Package atveryend Info: Empty hook `AtVeryEndDocument' on input line 680.
Package atveryend Info: Empty hook `AtEndAfterFileList' on input line 680.
Package atveryend Info: Empty hook `AtVeryVeryEnd' on input line 680.
 ) 
Here is how much of TeX's memory you used:
 10880 strings out of 429156
 144697 string characters out of 3168942
 364723 words of memory out of 3000000
 13996 multiletter control sequences out of 15000+200000
 11674 words of font info for 40 fonts, out of 3000000 for 9000
 786 hyphenation exceptions out of 8191
 40i,14n,45p,1102b,517s stack positions out of 5000i,500n,10000p,200000b,50000s

Output written on MCIW_SYL_Test.pdf (11 pages).
